/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import java.awt.event.KeyEvent;
import java.io.*;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;

/**
 *
 * @author Ahmed Abdelaziz
 */
public class ClientFrame extends javax.swing.JFrame {
    private SecretKey key;
    Socket mySocket;
    DataInputStream dis ;
    PrintStream ps;
    String name = "";
    boolean conState = false;
    
    public ClientFrame()
    {
        initComponents();  
        tf.requestFocus();
        smilyDisable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ta = new javax.swing.JTextArea();
        tf = new javax.swing.JTextField();
        jSend = new javax.swing.JButton();
        jConnect = new javax.swing.JButton();
        jDisconnect = new javax.swing.JButton();
        ipServer = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ta.setColumns(20);
        ta.setRows(5);
        ta.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        ta.setEnabled(false);
        jScrollPane1.setViewportView(ta);

        tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfKeyReleased(evt);
            }
        });

        jSend.setText("Plantext");
        jSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSendActionPerformed(evt);
            }
        });

        jConnect.setText("Connect");
        jConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConnectActionPerformed(evt);
            }
        });

        jDisconnect.setText("Disconnect");
        jDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDisconnectActionPerformed(evt);
            }
        });

        ipServer.setText("127.0.0.1");
        ipServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipServerActionPerformed(evt);
            }
        });

        jButton1.setText("ceaser encrypted");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("ceaser decrypted");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("AES encrypted");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("AES Decrypted");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Hashed");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tf, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSend, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ipServer, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jConnect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jDisconnect, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(ipServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(13, 13, 13)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jDisconnect)
                .addGap(18, 18, 18)
                .addComponent(jConnect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSend))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void smilyEnable() {
       
        tf.setEnabled(true);
        jDisconnect.setEnabled(true);
    }
    private void smilyDisable() {
        
        jSend.setEnabled(false);
        tf.setEnabled(false);
        jDisconnect.setEnabled(false);
    }
    private void jConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConnectActionPerformed
        name = JOptionPane.showInputDialog("Please Enter your Name: ");
        if(name.length() != 0) {
            if(conState == false) {
                try
                {
                    this.setTitle(name+" :: Connected");
                    mySocket = new Socket(ipServer.getText(), 5005);
                    dis = new DataInputStream(mySocket.getInputStream ());
                    ps = new PrintStream(mySocket.getOutputStream ());
                    ps.println(name);
                    ps.println("---------------------------------------------------------------");
                    ps.println(name+ "...... Connected :)");
                    ps.println("---------------------------------------------------------------");
                    conState = true;
                    jConnect.setEnabled(false);
                    ipServer.setEnabled(false);
                    smilyEnable();
                    Thread readThread = new Thread(new Runnable() {
                                        public void run() {
                                            while(true) {
                                                try {
                                                    String replyMsg = dis.readLine();
                                                    ta.append("\n"+replyMsg);
                                                } catch (IOException ex) {
                                                    JOptionPane.showMessageDialog(null, "Server Disconnected !!","Error",JOptionPane.ERROR_MESSAGE);
                                                    conState = false;
                                                    jConnect.setEnabled(true);
                                                    ipServer.setEnabled(true);
                                                    smilyDisable();
                                                    ta.setText("");
                                                    Thread.currentThread().stop();
                                                }
                                            }
                                        }
                                    });
                    readThread.start();
                }
                catch(IOException ex)
                {
                    JOptionPane.showMessageDialog(null, "No Server Found !!","Error",JOptionPane.ERROR_MESSAGE);
                    conState = false;
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "Already Connected","Error",JOptionPane.WARNING_MESSAGE);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Wrong User Name","Error",JOptionPane.WARNING_MESSAGE);
        }
        tf.requestFocus();
    }//GEN-LAST:event_jConnectActionPerformed

    private void jSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSendActionPerformed
        if(tf.getText().length() != 0) {
            ps.println(name+" ::  "+tf.getText());
            tf.setText("");
        }
    }//GEN-LAST:event_jSendActionPerformed

    private void tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                jSend.doClick();
                jSend.setEnabled(false);
        }
    }//GEN-LAST:event_tfKeyPressed

    private void tfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_SPACE) {
            if(tf.getText().length() == 1) {
                tf.setText("");
            }
        }
        if(tf.getText().length() > 0) {
            jSend.setEnabled(true);
        }
        else {
            jSend.setEnabled(false);
        }
    }//GEN-LAST:event_tfKeyReleased

    private void jDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDisconnectActionPerformed
        ps.print("@#@#"+name);
        this.setTitle(name+" :: Disconnected");
        try {
            dis.close();
            ps.close();
            jConnect.setEnabled(true);
            ipServer.setEnabled(true);
            smilyDisable();
            tf.setText("");
        } catch (IOException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jDisconnectActionPerformed
    private void sendSmily(String s) {
        ps.println(name+" ::       "+s);
        tf.requestFocus();
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(conState==true) {    
            ps.print("@#@#"+name);
            try {
                dis.close();
                ps.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
            char[] alpha = "abcdefghijklmnopqrstuvwxyz".toCharArray(); 
            char[] Data=tf.getText().toCharArray();
            char ENC[]=new char[Data.length];
            int key=3;
            for(int j=0;j< Data.length;j++){
                for(int i=0;i<alpha.length;i++){
                    if(Data[j]==alpha[i]){
                        ENC[j]=alpha[(i+key+26)%26];
                    }}}
                    String Y=new String(ENC);
            ps.println(name+"::"+Y);
   
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
             char[] alpha = "abcdefghijklmnopqrstuvwxyz".toCharArray(); 
            char[] Data=tf.getText().toCharArray();
            char DEC[]=new char[Data.length];
            int key=3;
            for(int j=0;j< Data.length;j++){
                for(int i=0;i<alpha.length;i++){
                    if(Data[j]==alpha[i]){
                        DEC[j]=alpha[(i-key+26)%26];
                    }}}
                    String Y=new String(DEC);
            ps.println(name+"::"+Y);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
              
        
        try {
            KeyGenerator gen= KeyGenerator.getInstance("AES");
                gen.init(128);
                key = gen.generateKey();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            Cipher AES_Algorithm = Cipher.getInstance("AES");
            AES_Algorithm = Cipher.getInstance("AES");
                          AES_Algorithm.init(Cipher.ENCRYPT_MODE, key);
              byte[] byteCipherText= AES_Algorithm.doFinal(tf.getText().getBytes());
              String X=new String(byteCipherText);
              ps.println(name+"::"+X);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            // TODO add your handling code here:
                        KeyGenerator gen= KeyGenerator.getInstance("AES");
                gen.init(128);
                key = gen.generateKey();
            Cipher AES_Algorithm = Cipher.getInstance("AES");
            AES_Algorithm.init(Cipher.DECRYPT_MODE, key);
            byte[] bytePlainText= AES_Algorithm.doFinal(tf.getText().getBytes());
            String Z=Arrays.toString(bytePlainText);
            ps.println(name+"::"+Z);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            // TODO add your handling code here:
            
            KeyGenerator generator= KeyGenerator.getInstance("AES");
            generator.init(128);
            SecretKey Key=generator.generateKey();
            MessageDigest messageDigest= MessageDigest.getInstance("SHA-256");
            messageDigest.update((Key.toString().getBytes()));
            String hashed= new String(messageDigest.digest());
            ps.println(name+"::"+hashed);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void ipServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipServerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ipServerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ipServer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jConnect;
    private javax.swing.JButton jDisconnect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jSend;
    private javax.swing.JTextArea ta;
    private javax.swing.JTextField tf;
    // End of variables declaration//GEN-END:variables
}
